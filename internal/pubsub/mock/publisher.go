// Code generated by MockGen. DO NOT EDIT.
// Source: publisher.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=publisher.go -destination=./mock/publisher.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pubsub "cloud.google.com/go/pubsub"
	pubsub0 "github.com/ucpr/mongo-streamer/internal/pubsub"
	gomock "go.uber.org/mock/gomock"
)

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// AsyncPublish mocks base method.
func (m *MockPublisher) AsyncPublish(ctx context.Context, msg pubsub0.Message) *pubsub.PublishResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncPublish", ctx, msg)
	ret0, _ := ret[0].(*pubsub.PublishResult)
	return ret0
}

// AsyncPublish indicates an expected call of AsyncPublish.
func (mr *MockPublisherMockRecorder) AsyncPublish(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncPublish", reflect.TypeOf((*MockPublisher)(nil).AsyncPublish), ctx, msg)
}
